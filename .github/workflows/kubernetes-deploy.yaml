name: Deploy to Kubernetes

on:
    workflow_run:
        workflows: ["Build and Push Container"]
        types:
            - completed
        branches: [main]
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    KUBE_NAMESPACE: frontend

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install kubectl
              uses: azure/setup-kubectl@v4
              with:
                  version: "latest"

            - name: Configure kubectl
              uses: azure/k8s-set-context@v4
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG }}

            - name: Create namespace if not exists
              run: |
                  kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

            - name: Deploy to Kubernetes
              run: |
                  # Get the latest image tag
                  IMAGE_TAG=$(kubectl get deployment frontend-deployment -n $KUBE_NAMESPACE -o jsonpath="{.spec.template.spec.containers[0].image}" 2>/dev/null || echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest")

                  # Apply the deployment
                  cat <<EOF | kubectl apply -f -
                  apiVersion: apps/v1
                  kind: Deployment
                  metadata:
                    name: frontend-deployment
                    namespace: $KUBE_NAMESPACE
                  spec:
                    replicas: 3
                    selector:
                      matchLabels:
                        app: frontend
                    template:
                      metadata:
                        labels:
                          app: frontend
                      spec:
                        containers:
                        - name: frontend
                          image: $IMAGE_TAG
                          ports:
                          - containerPort: 80
                  ---
                  apiVersion: v1
                  kind: Service
                  metadata:
                    name: frontend-service
                    namespace: $KUBE_NAMESPACE
                  spec:
                    type: ClusterIP
                    ports:
                    - port: 80
                      targetPort: 80
                    selector:
                      app: frontend
                  EOF

            - name: Verify deployment
              run: |
                  kubectl rollout status deployment/frontend-deployment -n $KUBE_NAMESPACE --timeout=180s
